const fs = require('fs').promises;
const path = require('path');

class DocumentConsolidator {
    constructor() {
        this.projectRoot = '/Users/abdiasernestogarcia/Desktop/❤️ ART & CO PROJECTS/CAROLINA THE DOODLER/projects/DoodleMashup-Replit';
        this.markdownFiles = [];
        this.consolidatedContent = '';
    }

    async run() {
        console.log('🔍 Scanning for markdown files...');
        await this.findMarkdownFiles();
        
        console.log('📝 Consolidating content...');
        await this.consolidateContent();
        
        console.log('💾 Creating consolidated file...');
        await this.createConsolidatedFile();
        
        console.log('🗑️ Cleaning up old files...');
        await this.cleanupOldFiles();
        
        console.log('✅ Consolidation complete!');
    }

    async findMarkdownFiles() {
        const files = [
            'BETA-CHECKLIST.md',
            'BUILD_STATUS_NEW.md',
            'BUILD_STATUS.md',
            'build-status.md',
            'README.md',
            'TECHNICAL.md'
        ];

        for (const file of files) {
            const filePath = path.join(this.projectRoot, file);
            try {
                const content = await fs.readFile(filePath, 'utf8');
                this.markdownFiles.push({
                    name: file,
                    path: filePath,
                    content: content.trim()
                });
                console.log(`✓ Found: ${file}`);
            } catch (error) {
                console.log(`⚠️ Could not read: ${file}`);
            }
        }
    }

    async consolidateContent() {
        const timestamp = new Date().toISOString().split('T')[0];
        
        this.consolidatedContent = `# Doodle Mashup Beta - Consolidated Documentation
*Last Updated: ${timestamp}*

---

## 📋 Table of Contents
1. [Project Overview](#project-overview)
2. [Technical Specifications](#technical-specifications)
3. [Build Status](#build-status)
4. [Beta Checklist](#beta-checklist)
5. [Setup & Installation](#setup--installation)
6. [Development Guidelines](#development-guidelines)

---

`;

        // Process each file and add to consolidated content
        for (const file of this.markdownFiles) {
            let sectionTitle = this.getSectionTitle(file.name);
            
            this.consolidatedContent += `## ${sectionTitle}\n`;
            this.consolidatedContent += `*Source: ${file.name}*\n\n`;
            
            // Clean and format content
            let content = file.content;
            
            // Remove duplicate headers if they match section title
            content = this.cleanDuplicateHeaders(content, sectionTitle);
            
            // Add content
            this.consolidatedContent += content + '\n\n';
            this.consolidatedContent += '---\n\n';
        }

        // Add footer
        this.consolidatedContent += `## 📚 Additional Resources

- **Project Repository**: DoodleMashup-Replit
- **iOS Version**: Available in DoodleMashup-iOS folder
- **Website**: CTD-Website project
- **Documentation**: APPS/docs folder

## 🚀 Quick Start Commands

\`\`\`bash
# Install dependencies
npm install

# Start development server
npm run dev

# Run tests
npm test

# Build for production
npm run build

# Run QA checks
./qa-check.sh
\`\`\`

---

*This document was automatically generated by consolidating all project markdown files.*
*Carolina The Doodler © 2025*
`;
    }

    getSectionTitle(filename) {
        const titles = {
            'README.md': 'Project Overview',
            'TECHNICAL.md': 'Technical Specifications',
            'BUILD_STATUS.md': 'Build Status (Legacy)',
            'BUILD_STATUS_NEW.md': 'Build Status (Current)',
            'build-status.md': 'Build Status (Latest)',
            'BETA-CHECKLIST.md': 'Beta Release Checklist'
        };
        return titles[filename] || filename.replace('.md', '').replace(/[-_]/g, ' ');
    }

    cleanDuplicateHeaders(content, sectionTitle) {
        // Remove lines that are duplicate headers
        const lines = content.split('\n');
        return lines.filter(line => {
            const cleanLine = line.replace(/^#+\s*/, '').trim();
            const cleanSection = sectionTitle.toLowerCase().replace(/[^a-z0-9\s]/g, '');
            return cleanLine.toLowerCase() !== cleanSection;
        }).join('\n');
    }

    async createConsolidatedFile() {
        const outputPath = path.join(this.projectRoot, 'PROJECT_DOCUMENTATION.md');
        await fs.writeFile(outputPath, this.consolidatedContent, 'utf8');
        console.log(`📄 Created: PROJECT_DOCUMENTATION.md`);
    }

    async cleanupOldFiles() {
        const filesToDelete = this.markdownFiles
            .filter(file => file.name !== 'README.md') // Keep README as main entry point
            .map(file => file.path);

        for (const filePath of filesToDelete) {
            try {
                await fs.unlink(filePath);
                console.log(`🗑️ Deleted: ${path.basename(filePath)}`);
            } catch (error) {
                console.log(`⚠️ Could not delete: ${path.basename(filePath)}`);
            }
        }

        // Update README to point to consolidated doc
        const newReadme = `# Doodle Mashup Beta

> **Note**: All project documentation has been consolidated into [PROJECT_DOCUMENTATION.md](./PROJECT_DOCUMENTATION.md)

## Quick Links
- 📚 [Full Documentation](./PROJECT_DOCUMENTATION.md)
- 🚀 [Quick Start Guide](./PROJECT_DOCUMENTATION.md#quick-start-commands)
- ✅ [Beta Checklist](./PROJECT_DOCUMENTATION.md#beta-release-checklist)
- 🔧 [Technical Specs](./PROJECT_DOCUMENTATION.md#technical-specifications)

## Development
\`\`\`bash
npm install && npm run dev
\`\`\`

---
*Carolina The Doodler © 2025*
`;

        const readmePath = path.join(this.projectRoot, 'README.md');
        await fs.writeFile(readmePath, newReadme, 'utf8');
        console.log(`📝 Updated: README.md`);
    }
}

// Run the consolidator
if (require.main === module) {
    const consolidator = new DocumentConsolidator();
    consolidator.run().catch(console.error);
}

module.exports = DocumentConsolidator;
